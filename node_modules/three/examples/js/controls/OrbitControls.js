// (function () {

// 	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
// 	//
// 	//    Orbit - left mouse / touch: one-finger move
// 	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
// 	//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

// 	const _changeEvent = {
// 		type: 'change'
// 	};
// 	const _startEvent = {
// 		type: 'start'
// 	};
// 	const _endEvent = {
// 		type: 'end'
// 	};

// 	class OrbitControls extends THREE.EventDispatcher {

// 		constructor(object, domElement) {

// 			super();
// 			if (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.');
// 			if (domElement === document) console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.');
// 			this.object = object;
// 			this.domElement = domElement;
// 			this.domElement.style.touchAction = 'none'; // disable touch scroll
// 			// Set to false to disable this control

// 			this.enabled = true; // "target" sets the location of focus, where the object orbits around

// 			this.target = new THREE.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )

// 			this.minDistance = 0;
// 			this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )

// 			this.minZoom = 0;
// 			this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.
// 			// Range is 0 to Math.PI radians.

// 			this.minPolarAngle = 0; // radians

// 			this.maxPolarAngle = Math.PI; // radians
// 			// How far you can orbit horizontally, upper and lower limits.
// 			// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )

// 			this.minAzimuthAngle = - Infinity; // radians

// 			this.maxAzimuthAngle = Infinity; // radians
// 			// Set to true to enable damping (inertia)
// 			// If damping is enabled, you must call controls.update() in your animation loop

// 			this.enableDamping = false;
// 			this.dampingFactor = 0.05; // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
// 			// Set to false to disable zooming

// 			this.enableZoom = true;
// 			this.zoomSpeed = 1.0; // Set to false to disable rotating

// 			this.enableRotate = true;
// 			this.rotateSpeed = 1.0; // Set to false to disable panning

// 			this.enablePan = true;
// 			this.panSpeed = 1.0;
// 			this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up

// 			this.keyPanSpeed = 7.0; // pixels moved per arrow key push
// 			// Set to true to automatically rotate around the target
// 			// If auto-rotate is enabled, you must call controls.update() in your animation loop

// 			this.autoRotate = false;
// 			this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60
// 			// The four arrow keys

// 			this.keys = {
// 				LEFT: 'ArrowLeft',
// 				UP: 'ArrowUp',
// 				RIGHT: 'ArrowRight',
// 				BOTTOM: 'ArrowDown'
// 			}; // Mouse buttons

// 			this.mouseButtons = {
// 				LEFT: THREE.MOUSE.ROTATE,
// 				MIDDLE: THREE.MOUSE.DOLLY,
// 				RIGHT: THREE.MOUSE.PAN
// 			}; // Touch fingers

// 			this.touches = {
// 				ONE: THREE.TOUCH.ROTATE,
// 				TWO: THREE.TOUCH.DOLLY_PAN
// 			}; // for reset

// 			this.target0 = this.target.clone();
// 			this.position0 = this.object.position.clone();
// 			this.zoom0 = this.object.zoom; // the target DOM element for key events

// 			this._domElementKeyEvents = null; //
// 			// public methods
// 			//

// 			this.getPolarAngle = function () {

// 				return spherical.phi;

// 			};

// 			this.getAzimuthalAngle = function () {

// 				return spherical.theta;

// 			};

// 			this.getDistance = function () {

// 				return this.object.position.distanceTo(this.target);

// 			};

// 			this.listenToKeyEvents = function (domElement) {

// 				domElement.addEventListener('keydown', onKeyDown);
// 				this._domElementKeyEvents = domElement;

// 			};

// 			this.saveState = function () {

// 				scope.target0.copy(scope.target);
// 				scope.position0.copy(scope.object.position);
// 				scope.zoom0 = scope.object.zoom;

// 			};

// 			this.reset = function () {

// 				scope.target.copy(scope.target0);
// 				scope.object.position.copy(scope.position0);
// 				scope.object.zoom = scope.zoom0;
// 				scope.object.updateProjectionMatrix();
// 				scope.dispatchEvent(_changeEvent);
// 				scope.update();
// 				state = STATE.NONE;

// 			}; // this method is exposed, but perhaps it would be better if we can make it private...


// 			this.update = function () {

// 				const offset = new THREE.Vector3(); // so camera.up is the orbit axis

// 				const quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));
// 				const quatInverse = quat.clone().invert();
// 				const lastPosition = new THREE.Vector3();
// 				const lastQuaternion = new THREE.Quaternion();
// 				const twoPI = 2 * Math.PI;
// 				return function update() {

// 					const position = scope.object.position;
// 					offset.copy(position).sub(scope.target); // rotate offset to "y-axis-is-up" space

// 					offset.applyQuaternion(quat); // angle from z-axis around y-axis

// 					spherical.setFromVector3(offset);

// 					if (scope.autoRotate && state === STATE.NONE) {

// 						rotateLeft(getAutoRotationAngle());

// 					}

// 					if (scope.enableDamping) {

// 						spherical.theta += sphericalDelta.theta * scope.dampingFactor;
// 						spherical.phi += sphericalDelta.phi * scope.dampingFactor;

// 					} else {

// 						spherical.theta += sphericalDelta.theta;
// 						spherical.phi += sphericalDelta.phi;

// 					} // restrict theta to be between desired limits


// 					let min = scope.minAzimuthAngle;
// 					let max = scope.maxAzimuthAngle;

// 					if (isFinite(min) && isFinite(max)) {

// 						if (min < - Math.PI) min += twoPI; else if (min > Math.PI) min -= twoPI;
// 						if (max < - Math.PI) max += twoPI; else if (max > Math.PI) max -= twoPI;

// 						if (min <= max) {

// 							spherical.theta = Math.max(min, Math.min(max, spherical.theta));

// 						} else {

// 							spherical.theta = spherical.theta > (min + max) / 2 ? Math.max(min, spherical.theta) : Math.min(max, spherical.theta);

// 						}

// 					} // restrict phi to be between desired limits


// 					spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
// 					spherical.makeSafe();
// 					spherical.radius *= scale; // restrict radius to be between desired limits

// 					spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location

// 					if (scope.enableDamping === true) {

// 						scope.target.addScaledVector(panOffset, scope.dampingFactor);

// 					} else {

// 						scope.target.add(panOffset);

// 					}

// 					offset.setFromSpherical(spherical); // rotate offset back to "camera-up-vector-is-up" space

// 					offset.applyQuaternion(quatInverse);
// 					position.copy(scope.target).add(offset);
// 					scope.object.lookAt(scope.target);

// 					if (scope.enableDamping === true) {

// 						sphericalDelta.theta *= 1 - scope.dampingFactor;
// 						sphericalDelta.phi *= 1 - scope.dampingFactor;
// 						panOffset.multiplyScalar(1 - scope.dampingFactor);

// 					} else {

// 						sphericalDelta.set(0, 0, 0);
// 						panOffset.set(0, 0, 0);

// 					}

// 					scale = 1; // update condition is:
// 					// min(camera displacement, camera rotation in radians)^2 > EPS
// 					// using small-angle approximation cos(x/2) = 1 - x^2 / 8

// 					if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

// 						scope.dispatchEvent(_changeEvent);
// 						lastPosition.copy(scope.object.position);
// 						lastQuaternion.copy(scope.object.quaternion);
// 						zoomChanged = false;
// 						return true;

// 					}

// 					return false;

// 				};

// 			}();

// 			this.dispose = function () {

// 				scope.domElement.removeEventListener('contextmenu', onContextMenu);
// 				scope.domElement.removeEventListener('pointerdown', onPointerDown);
// 				scope.domElement.removeEventListener('pointercancel', onPointerCancel);
// 				scope.domElement.removeEventListener('wheel', onMouseWheel);
// 				scope.domElement.removeEventListener('pointermove', onPointerMove);
// 				scope.domElement.removeEventListener('pointerup', onPointerUp);

// 				if (scope._domElementKeyEvents !== null) {

// 					scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);

// 				} //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

// 			}; //
// 			// internals
// 			//


// 			const scope = this;
// 			const STATE = {
// 				NONE: - 1,
// 				ROTATE: 0,
// 				DOLLY: 1,
// 				PAN: 2,
// 				TOUCH_ROTATE: 3,
// 				TOUCH_PAN: 4,
// 				TOUCH_DOLLY_PAN: 5,
// 				TOUCH_DOLLY_ROTATE: 6
// 			};
// 			let state = STATE.NONE;
// 			const EPS = 0.000001; // current position in spherical coordinates

// 			const spherical = new THREE.Spherical();
// 			const sphericalDelta = new THREE.Spherical();
// 			let scale = 1;
// 			const panOffset = new THREE.Vector3();
// 			let zoomChanged = false;
// 			const rotateStart = new THREE.Vector2();
// 			const rotateEnd = new THREE.Vector2();
// 			const rotateDelta = new THREE.Vector2();
// 			const panStart = new THREE.Vector2();
// 			const panEnd = new THREE.Vector2();
// 			const panDelta = new THREE.Vector2();
// 			const dollyStart = new THREE.Vector2();
// 			const dollyEnd = new THREE.Vector2();
// 			const dollyDelta = new THREE.Vector2();
// 			const pointers = [];
// 			const pointerPositions = {};

// 			function getAutoRotationAngle() {

// 				return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

// 			}

// 			function getZoomScale() {

// 				return Math.pow(0.95, scope.zoomSpeed);

// 			}

// 			function rotateLeft(angle) {

// 				sphericalDelta.theta -= angle;

// 			}

// 			function rotateUp(angle) {

// 				sphericalDelta.phi -= angle;

// 			}

// 			const panLeft = function () {

// 				const v = new THREE.Vector3();
// 				return function panLeft(distance, objectMatrix) {

// 					v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix

// 					v.multiplyScalar(- distance);
// 					panOffset.add(v);

// 				};

// 			}();

// 			const panUp = function () {

// 				const v = new THREE.Vector3();
// 				return function panUp(distance, objectMatrix) {

// 					if (scope.screenSpacePanning === true) {

// 						v.setFromMatrixColumn(objectMatrix, 1);

// 					} else {

// 						v.setFromMatrixColumn(objectMatrix, 0);
// 						v.crossVectors(scope.object.up, v);

// 					}

// 					v.multiplyScalar(distance);
// 					panOffset.add(v);

// 				};

// 			}(); // deltaX and deltaY are in pixels; right and down are positive


// 			const pan = function () {

// 				const offset = new THREE.Vector3();
// 				return function pan(deltaX, deltaY) {

// 					const element = scope.domElement;

// 					if (scope.object.isPerspectiveCamera) {

// 						// perspective
// 						const position = scope.object.position;
// 						offset.copy(position).sub(scope.target);
// 						let targetDistance = offset.length(); // half of the fov is center to top of screen

// 						targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we use only clientHeight here so aspect ratio does not distort speed

// 						panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
// 						panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);

// 					} else if (scope.object.isOrthographicCamera) {

// 						// orthographic
// 						panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
// 						panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);

// 					} else {

// 						// camera neither orthographic nor perspective
// 						console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');
// 						scope.enablePan = false;

// 					}

// 				};

// 			}();

// 			function dollyOut(dollyScale) {

// 				if (scope.object.isPerspectiveCamera) {

// 					scale /= dollyScale;

// 				} else if (scope.object.isOrthographicCamera) {

// 					scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
// 					scope.object.updateProjectionMatrix();
// 					zoomChanged = true;

// 				} else {

// 					console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
// 					scope.enableZoom = false;

// 				}

// 			}

// 			function dollyIn(dollyScale) {

// 				if (scope.object.isPerspectiveCamera) {

// 					scale *= dollyScale;

// 				} else if (scope.object.isOrthographicCamera) {

// 					scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
// 					scope.object.updateProjectionMatrix();
// 					zoomChanged = true;

// 				} else {

// 					console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');
// 					scope.enableZoom = false;

// 				}

// 			} //
// 			// event callbacks - update the object state
// 			//


// 			function handleMouseDownRotate(event) {

// 				rotateStart.set(event.clientX, event.clientY);

// 			}

// 			function handleMouseDownDolly(event) {

// 				dollyStart.set(event.clientX, event.clientY);

// 			}

// 			function handleMouseDownPan(event) {

// 				panStart.set(event.clientX, event.clientY);

// 			}

// 			function handleMouseMoveRotate(event) {

// 				rotateEnd.set(event.clientX, event.clientY);
// 				rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
// 				const element = scope.domElement;
// 				rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

// 				rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
// 				rotateStart.copy(rotateEnd);
// 				scope.update();

// 			}

// 			function handleMouseMoveDolly(event) {

// 				dollyEnd.set(event.clientX, event.clientY);
// 				dollyDelta.subVectors(dollyEnd, dollyStart);

// 				if (dollyDelta.y > 0) {

// 					dollyOut(getZoomScale());

// 				} else if (dollyDelta.y < 0) {

// 					dollyIn(getZoomScale());

// 				}

// 				dollyStart.copy(dollyEnd);
// 				scope.update();

// 			}

// 			function handleMouseMovePan(event) {

// 				panEnd.set(event.clientX, event.clientY);
// 				panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
// 				pan(panDelta.x, panDelta.y);
// 				panStart.copy(panEnd);
// 				scope.update();

// 			}

// 			function handleMouseWheel(event) {

// 				if (event.deltaY < 0) {

// 					dollyIn(getZoomScale());

// 				} else if (event.deltaY > 0) {

// 					dollyOut(getZoomScale());

// 				}

// 				scope.update();

// 			}

// 			function handleKeyDown(event) {

// 				let needsUpdate = false;

// 				switch (event.code) {

// 					case scope.keys.UP:
// 						pan(0, scope.keyPanSpeed);
// 						needsUpdate = true;
// 						break;

// 					case scope.keys.BOTTOM:
// 						pan(0, - scope.keyPanSpeed);
// 						needsUpdate = true;
// 						break;

// 					case scope.keys.LEFT:
// 						pan(scope.keyPanSpeed, 0);
// 						needsUpdate = true;
// 						break;

// 					case scope.keys.RIGHT:
// 						pan(- scope.keyPanSpeed, 0);
// 						needsUpdate = true;
// 						break;

// 				}

// 				if (needsUpdate) {

// 					// prevent the browser from scrolling on cursor keys
// 					event.preventDefault();
// 					scope.update();

// 				}

// 			}

// 			function handleTouchStartRotate() {

// 				if (pointers.length === 1) {

// 					rotateStart.set(pointers[0].pageX, pointers[0].pageY);

// 				} else {

// 					const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
// 					const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
// 					rotateStart.set(x, y);

// 				}

// 			}

// 			function handleTouchStartPan() {

// 				if (pointers.length === 1) {

// 					panStart.set(pointers[0].pageX, pointers[0].pageY);

// 				} else {

// 					const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);
// 					const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);
// 					panStart.set(x, y);

// 				}

// 			}

// 			function handleTouchStartDolly() {

// 				const dx = pointers[0].pageX - pointers[1].pageX;
// 				const dy = pointers[0].pageY - pointers[1].pageY;
// 				const distance = Math.sqrt(dx * dx + dy * dy);
// 				dollyStart.set(0, distance);

// 			}

// 			function handleTouchStartDollyPan() {

// 				if (scope.enableZoom) handleTouchStartDolly();
// 				if (scope.enablePan) handleTouchStartPan();

// 			}

// 			function handleTouchStartDollyRotate() {

// 				if (scope.enableZoom) handleTouchStartDolly();
// 				if (scope.enableRotate) handleTouchStartRotate();

// 			}

// 			function handleTouchMoveRotate(event) {

// 				if (pointers.length == 1) {

// 					rotateEnd.set(event.pageX, event.pageY);

// 				} else {

// 					const position = getSecondPointerPosition(event);
// 					const x = 0.5 * (event.pageX + position.x);
// 					const y = 0.5 * (event.pageY + position.y);
// 					rotateEnd.set(x, y);

// 				}

// 				rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);
// 				const element = scope.domElement;
// 				rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height

// 				rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);
// 				rotateStart.copy(rotateEnd);

// 			}

// 			function handleTouchMovePan(event) {

// 				if (pointers.length === 1) {

// 					panEnd.set(event.pageX, event.pageY);

// 				} else {

// 					const position = getSecondPointerPosition(event);
// 					const x = 0.5 * (event.pageX + position.x);
// 					const y = 0.5 * (event.pageY + position.y);
// 					panEnd.set(x, y);

// 				}

// 				panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);
// 				pan(panDelta.x, panDelta.y);
// 				panStart.copy(panEnd);

// 			}

// 			function handleTouchMoveDolly(event) {

// 				const position = getSecondPointerPosition(event);
// 				const dx = event.pageX - position.x;
// 				const dy = event.pageY - position.y;
// 				const distance = Math.sqrt(dx * dx + dy * dy);
// 				dollyEnd.set(0, distance);
// 				dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));
// 				dollyOut(dollyDelta.y);
// 				dollyStart.copy(dollyEnd);

// 			}

// 			function handleTouchMoveDollyPan(event) {

// 				if (scope.enableZoom) handleTouchMoveDolly(event);
// 				if (scope.enablePan) handleTouchMovePan(event);

// 			}

// 			function handleTouchMoveDollyRotate(event) {

// 				if (scope.enableZoom) handleTouchMoveDolly(event);
// 				if (scope.enableRotate) handleTouchMoveRotate(event);

// 			} //
// 			// event handlers - FSM: listen for events and reset state
// 			//


// 			function onPointerDown(event) {

// 				if (scope.enabled === false) return;

// 				if (pointers.length === 0) {

// 					scope.domElement.setPointerCapture(event.pointerId);
// 					scope.domElement.addEventListener('pointermove', onPointerMove);
// 					scope.domElement.addEventListener('pointerup', onPointerUp);

// 				} //


// 				addPointer(event);

// 				if (event.pointerType === 'touch') {

// 					onTouchStart(event);

// 				} else {

// 					onMouseDown(event);

// 				}

// 			}

// 			function onPointerMove(event) {

// 				if (scope.enabled === false) return;

// 				if (event.pointerType === 'touch') {

// 					onTouchMove(event);

// 				} else {

// 					onMouseMove(event);

// 				}

// 			}

// 			function onPointerUp(event) {

// 				removePointer(event);

// 				if (pointers.length === 0) {

// 					scope.domElement.releasePointerCapture(event.pointerId);
// 					scope.domElement.removeEventListener('pointermove', onPointerMove);
// 					scope.domElement.removeEventListener('pointerup', onPointerUp);

// 				}

// 				scope.dispatchEvent(_endEvent);
// 				state = STATE.NONE;

// 			}

// 			function onPointerCancel(event) {

// 				removePointer(event);

// 			}

// 			function onMouseDown(event) {

// 				let mouseAction;

// 				switch (event.button) {

// 					case 0:
// 						mouseAction = scope.mouseButtons.LEFT;
// 						break;

// 					case 1:
// 						mouseAction = scope.mouseButtons.MIDDLE;
// 						break;

// 					case 2:
// 						mouseAction = scope.mouseButtons.RIGHT;
// 						break;

// 					default:
// 						mouseAction = - 1;

// 				}

// 				switch (mouseAction) {

// 					case THREE.MOUSE.DOLLY:
// 						if (scope.enableZoom === false) return;
// 						handleMouseDownDolly(event);
// 						state = STATE.DOLLY;
// 						break;

// 					case THREE.MOUSE.ROTATE:
// 						if (event.ctrlKey || event.metaKey || event.shiftKey) {

// 							if (scope.enablePan === false) return;
// 							handleMouseDownPan(event);
// 							state = STATE.PAN;

// 						} else {

// 							if (scope.enableRotate === false) return;
// 							handleMouseDownRotate(event);
// 							state = STATE.ROTATE;

// 						}

// 						break;

// 					case THREE.MOUSE.PAN:
// 						if (event.ctrlKey || event.metaKey || event.shiftKey) {

// 							if (scope.enableRotate === false) return;
// 							handleMouseDownRotate(event);
// 							state = STATE.ROTATE;

// 						} else {

// 							if (scope.enablePan === false) return;
// 							handleMouseDownPan(event);
// 							state = STATE.PAN;

// 						}

// 						break;

// 					default:
// 						state = STATE.NONE;

// 				}

// 				if (state !== STATE.NONE) {

// 					scope.dispatchEvent(_startEvent);

// 				}

// 			}

// 			function onMouseMove(event) {

// 				if (scope.enabled === false) return;

// 				switch (state) {

// 					case STATE.ROTATE:
// 						if (scope.enableRotate === false) return;
// 						handleMouseMoveRotate(event);
// 						break;

// 					case STATE.DOLLY:
// 						if (scope.enableZoom === false) return;
// 						handleMouseMoveDolly(event);
// 						break;

// 					case STATE.PAN:
// 						if (scope.enablePan === false) return;
// 						handleMouseMovePan(event);
// 						break;

// 				}

// 			}

// 			function onMouseWheel(event) {

// 				if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE) return;
// 				event.preventDefault();
// 				scope.dispatchEvent(_startEvent);
// 				handleMouseWheel(event);
// 				scope.dispatchEvent(_endEvent);

// 			}

// 			function onKeyDown(event) {

// 				if (scope.enabled === false || scope.enablePan === false) return;
// 				handleKeyDown(event);

// 			}

// 			function onTouchStart(event) {

// 				trackPointer(event);

// 				switch (pointers.length) {

// 					case 1:
// 						switch (scope.touches.ONE) {

// 							case THREE.TOUCH.ROTATE:
// 								if (scope.enableRotate === false) return;
// 								handleTouchStartRotate();
// 								state = STATE.TOUCH_ROTATE;
// 								break;

// 							case THREE.TOUCH.PAN:
// 								if (scope.enablePan === false) return;
// 								handleTouchStartPan();
// 								state = STATE.TOUCH_PAN;
// 								break;

// 							default:
// 								state = STATE.NONE;

// 						}

// 						break;

// 					case 2:
// 						switch (scope.touches.TWO) {

// 							case THREE.TOUCH.DOLLY_PAN:
// 								if (scope.enableZoom === false && scope.enablePan === false) return;
// 								handleTouchStartDollyPan();
// 								state = STATE.TOUCH_DOLLY_PAN;
// 								break;

// 							case THREE.TOUCH.DOLLY_ROTATE:
// 								if (scope.enableZoom === false && scope.enableRotate === false) return;
// 								handleTouchStartDollyRotate();
// 								state = STATE.TOUCH_DOLLY_ROTATE;
// 								break;

// 							default:
// 								state = STATE.NONE;

// 						}

// 						break;

// 					default:
// 						state = STATE.NONE;

// 				}

// 				if (state !== STATE.NONE) {

// 					scope.dispatchEvent(_startEvent);

// 				}

// 			}

// 			function onTouchMove(event) {

// 				trackPointer(event);

// 				switch (state) {

// 					case STATE.TOUCH_ROTATE:
// 						if (scope.enableRotate === false) return;
// 						handleTouchMoveRotate(event);
// 						scope.update();
// 						break;

// 					case STATE.TOUCH_PAN:
// 						if (scope.enablePan === false) return;
// 						handleTouchMovePan(event);
// 						scope.update();
// 						break;

// 					case STATE.TOUCH_DOLLY_PAN:
// 						if (scope.enableZoom === false && scope.enablePan === false) return;
// 						handleTouchMoveDollyPan(event);
// 						scope.update();
// 						break;

// 					case STATE.TOUCH_DOLLY_ROTATE:
// 						if (scope.enableZoom === false && scope.enableRotate === false) return;
// 						handleTouchMoveDollyRotate(event);
// 						scope.update();
// 						break;

// 					default:
// 						state = STATE.NONE;

// 				}

// 			}

// 			function onContextMenu(event) {

// 				if (scope.enabled === false) return;
// 				event.preventDefault();

// 			}

// 			function addPointer(event) {

// 				pointers.push(event);

// 			}

// 			function removePointer(event) {

// 				delete pointerPositions[event.pointerId];

// 				for (let i = 0; i < pointers.length; i++) {

// 					if (pointers[i].pointerId == event.pointerId) {

// 						pointers.splice(i, 1);
// 						return;

// 					}

// 				}

// 			}

// 			function trackPointer(event) {

// 				let position = pointerPositions[event.pointerId];

// 				if (position === undefined) {

// 					position = new THREE.Vector2();
// 					pointerPositions[event.pointerId] = position;

// 				}

// 				position.set(event.pageX, event.pageY);

// 			}

// 			function getSecondPointerPosition(event) {

// 				const pointer = event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];
// 				return pointerPositions[pointer.pointerId];

// 			} //


// 			scope.domElement.addEventListener('contextmenu', onContextMenu);
// 			scope.domElement.addEventListener('pointerdown', onPointerDown);
// 			scope.domElement.addEventListener('pointercancel', onPointerCancel);
// 			scope.domElement.addEventListener('wheel', onMouseWheel, {
// 				passive: false
// 			}); // force an update at start

// 			this.update();

// 		}

// 	} // This set of controls performs orbiting, dollying (zooming), and panning.
// 	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
// 	// This is very similar to OrbitControls, another set of touch behavior
// 	//
// 	//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
// 	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
// 	//    Pan - left mouse, or arrow keys / touch: one-finger move


// 	class MapControls extends OrbitControls {

// 		constructor(object, domElement) {

// 			super(object, domElement);
// 			this.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up

// 			this.mouseButtons.LEFT = THREE.MOUSE.PAN;
// 			this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;
// 			this.touches.ONE = THREE.TOUCH.PAN;
// 			this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;

// 		}

// 	}

// 	THREE.MapControls = MapControls;
// 	THREE.OrbitControls = OrbitControls;

// })();

/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author erich666 / http://erichaines.com
 */
/*global THREE, console */

// This set of controls performs orbiting, dollying (zooming), and panning. It maintains
// the "up" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is
// supported.
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finter swipe

THREE.OrbitControls = function ( object, domElement ) {
	console.log("strart orbit");
	this.object = object;
	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// API

	// Set to false to disable this control
	this.enabled = true;

	// "target" sets the location of focus, where the control orbits around
	// and where it pans with respect to.
	this.target = new THREE.Vector3();

	// center is old, deprecated; use "target" instead
	this.center = this.target;

	// This option actually enables dollying in and out; left as "zoom" for
	// backwards compatibility
	this.noZoom = false;
	this.zoomSpeed = 1.0;

	// Limits to how far you can dolly in and out ( PerspectiveCamera only )
	this.minDistance = 0;
	this.maxDistance = Infinity;

	// Limits to how far you can zoom in and out ( OrthographicCamera only )
	this.minZoom = 0;
	this.maxZoom = Infinity;

	// Set to true to disable this control
	this.noRotate = false;
	this.rotateSpeed = 1.0;
	
	// Disabled by default
	this.tiltEnabled = false;
	this.tiltSpeed = 0.81;  // you might want an multiplier for iOS

	// Set to true to disable this control
	this.noPan = false;
	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

	// Set to true to automatically rotate around the target
	this.autoRotate = false;
	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	// How far you can orbit vertically, upper and lower limits.
	// Range is 0 to Math.PI radians.
	this.minPolarAngle = 0; // radians
	this.maxPolarAngle = Math.PI; // radians

	// How far you can orbit horizontally, upper and lower limits.
	// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
	this.minAzimuthAngle = - Infinity; // radians
	this.maxAzimuthAngle = Infinity; // radians

	// Set to true to disable use of the keys
	this.noKeys = false;

	// The four arrow keys
	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

	// Mouse buttons
	this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

	////////////
	// internals

	var scope = this;

	var EPS = 0.000001;

	var rotateStart = new THREE.Vector2();
	var rotateEnd = new THREE.Vector2();
	var rotateDelta = new THREE.Vector2();

	var panStart = new THREE.Vector2();
	var panEnd = new THREE.Vector2();
	var panDelta = new THREE.Vector2();
	var panOffset = new THREE.Vector3();

	var offset = new THREE.Vector3();

	var dollyStart = new THREE.Vector2();
	var dollyEnd = new THREE.Vector2();
	var dollyDelta = new THREE.Vector2();

	var theta;
	var phi;
	var phiDelta = 0;
	var thetaDelta = 0;
	var scale = 1;
	var pan = new THREE.Vector3();

	var lastPosition = new THREE.Vector3();
	var lastQuaternion = new THREE.Quaternion();

	var STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

	var state = STATE.NONE;

	// for reset

	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.zoom0 = this.object.zoom;

	// so camera.up is the orbit axis

	var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
	var quatInverse = quat.clone().inverse();

	// events

	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start' };
	var endEvent = { type: 'end' };

	this.rotateLeft = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		thetaDelta -= angle;

	};

	this.rotateUp = function ( angle ) {

		if ( angle === undefined ) {

			angle = getAutoRotationAngle();

		}

		phiDelta -= angle;

	};

	// pass in distance in world space to move left
	this.panLeft = function ( distance ) {

		var te = this.object.matrix.elements;

		// get X column of matrix
		panOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );
		panOffset.multiplyScalar( - distance );

		pan.add( panOffset );

	};

	// pass in distance in world space to move up
	this.panUp = function ( distance ) {

		var te = this.object.matrix.elements;

		// get Y column of matrix
		panOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );
		panOffset.multiplyScalar( distance );

		pan.add( panOffset );

	};

	// pass in x,y of change desired in pixel space,
	// right and down are positive
	this.pan = function ( deltaX, deltaY ) {

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		if ( scope.object instanceof THREE.PerspectiveCamera ) {

			// perspective
			var position = scope.object.position;
			var offset = position.clone().sub( scope.target );
			var targetDistance = offset.length();

			// half of the fov is center to top of screen
			targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

			// we actually don't use screenWidth, since perspective camera is fixed to screen height
			scope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );
			scope.panUp( 2 * deltaY * targetDistance / element.clientHeight );

		} else if ( scope.object instanceof THREE.OrthographicCamera ) {

			// orthographic
			scope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );
			scope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );

		} else {

			// camera neither orthographic or perspective
			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );

		}

	};

	this.dollyIn = function ( dollyScale ) {

		if ( dollyScale === undefined ) {

			dollyScale = getZoomScale();

		}

		if ( scope.object instanceof THREE.PerspectiveCamera ) {

			scale /= dollyScale;

		} else if ( scope.object instanceof THREE.OrthographicCamera ) {

			scope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom * dollyScale ) );
			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );

		}

	};

	this.dollyOut = function ( dollyScale ) {

		if ( dollyScale === undefined ) {

			dollyScale = getZoomScale();

		}

		if ( scope.object instanceof THREE.PerspectiveCamera ) {

			scale *= dollyScale;

		} else if ( scope.object instanceof THREE.OrthographicCamera ) {

			scope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / dollyScale ) );
			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );

		}

	};

	this.update = function () {

		var position = this.object.position;

		offset.copy( position ).sub( this.target );

		// rotate offset to "y-axis-is-up" space
		offset.applyQuaternion( quat );

		// angle from z-axis around y-axis

		theta = Math.atan2( offset.x, offset.z );

		// angle from y-axis

		phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );

		if ( this.autoRotate && state === STATE.NONE ) {

			this.rotateLeft( getAutoRotationAngle() );

		}

		theta += thetaDelta;
		phi += phiDelta;

		// restrict theta to be between desired limits
		theta = Math.max( this.minAzimuthAngle, Math.min( this.maxAzimuthAngle, theta ) );

		// restrict phi to be between desired limits
		phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );

		// restrict phi to be betwee EPS and PI-EPS
		phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );

		var radius = offset.length() * scale;

		// restrict radius to be between desired limits
		radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );

		// move target to panned location
		this.target.add( pan );

		offset.x = radius * Math.sin( phi ) * Math.sin( theta );
		offset.y = radius * Math.cos( phi );
		offset.z = radius * Math.sin( phi ) * Math.cos( theta );

		// rotate offset back to "camera-up-vector-is-up" space
		offset.applyQuaternion( quatInverse );

		position.copy( this.target ).add( offset );

		this.object.lookAt( this.target );

		thetaDelta = 0;
		phiDelta = 0;
		scale = 1;
		pan.set( 0, 0, 0 );

		// update condition is:
		// min(camera displacement, camera rotation in radians)^2 > EPS
		// using small-angle approximation cos(x/2) = 1 - x^2 / 8

		if ( lastPosition.distanceToSquared( this.object.position ) > EPS
		    || 8 * (1 - lastQuaternion.dot(this.object.quaternion)) > EPS ) {

			this.dispatchEvent( changeEvent );

			lastPosition.copy( this.object.position );
			lastQuaternion.copy (this.object.quaternion );

		}

	};


	this.reset = function () {

		state = STATE.NONE;

		this.target.copy( this.target0 );
		this.object.position.copy( this.position0 );
		this.object.zoom = this.zoom0;

		this.object.updateProjectionMatrix();
		this.dispatchEvent( changeEvent );

		this.update();

	};

	this.getPolarAngle = function () {

		return phi;

	};

	this.getAzimuthalAngle = function () {

		return theta

	};

	function getAutoRotationAngle() {

		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

	}

	function getZoomScale() {

		return Math.pow( 0.95, scope.zoomSpeed );

	}

	function onMouseDown( event ) {

		if ( scope.enabled === false ) return;
		event.preventDefault();

		if ( event.button === scope.mouseButtons.ORBIT ) {
			if ( scope.noRotate === true ) return;

			state = STATE.ROTATE;

			rotateStart.set( event.clientX, event.clientY );
			

		} else if ( event.button === scope.mouseButtons.ZOOM ) {
			if ( scope.noZoom === true ) return;

			state = STATE.DOLLY;

			dollyStart.set( event.clientX, event.clientY );

		} else if ( event.button === scope.mouseButtons.PAN ) {
			if ( scope.noPan === true ) return;

			state = STATE.PAN;

			panStart.set( event.clientX, event.clientY );

		}

		if ( state !== STATE.NONE ) {
			document.addEventListener( 'mousemove', onMouseMove, false );
			document.addEventListener( 'mouseup', onMouseUp, false );
			scope.dispatchEvent( startEvent );
		}

	}

	function onMouseMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		if ( state === STATE.ROTATE ) {

			if ( scope.noRotate === true ) return;

			rotateEnd.set( event.clientX, event.clientY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			// rotating across whole screen goes 360 degrees around
			scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );


			rotateStart.copy( rotateEnd );

		} else if ( state === STATE.DOLLY ) {

			if ( scope.noZoom === true ) return;

			dollyEnd.set( event.clientX, event.clientY );
			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				scope.dollyIn();

			} else if ( dollyDelta.y < 0 ) {

				scope.dollyOut();

			}

			dollyStart.copy( dollyEnd );

		} else if ( state === STATE.PAN ) {

			if ( scope.noPan === true ) return;

			panEnd.set( event.clientX, event.clientY );
			panDelta.subVectors( panEnd, panStart );

			scope.pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

		}

		if ( state !== STATE.NONE ) scope.update();

	}

	function onMouseUp( /* event */ ) {

		if ( scope.enabled === false ) return;

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );
		scope.dispatchEvent( endEvent );
		state = STATE.NONE;

	}

	function onMouseWheel( event ) {

		if ( scope.enabled === false || scope.noZoom === true || state !== STATE.NONE ) return;

		event.preventDefault();
		event.stopPropagation();

		var delta = 0;

		if ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9

			delta = event.wheelDelta;

		} else if ( event.detail !== undefined ) { // Firefox

			delta = - event.detail;

		}

		if ( delta > 0 ) {

			scope.dollyOut();

		} else if ( delta < 0 ) {

			scope.dollyIn();

		}

		scope.update();
		scope.dispatchEvent( startEvent );
		scope.dispatchEvent( endEvent );

	}

	function onKeyDown( event ) {

		if ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;

		switch ( event.keyCode ) {

			case scope.keys.UP:
				scope.pan( 0, scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.BOTTOM:
				scope.pan( 0, - scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.LEFT:
				scope.pan( scope.keyPanSpeed, 0 );
				scope.update();
				break;

			case scope.keys.RIGHT:
				scope.pan( - scope.keyPanSpeed, 0 );
				scope.update();
				break;

		}

	}

	function touchstart( event ) {

		if ( scope.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:	// one-fingered touch: rotate

				if ( scope.noRotate === true ) return;

				state = STATE.TOUCH_ROTATE;

				rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				break;

			case 2:	// two-fingered touch: dolly

				if ( scope.noZoom === true ) return;

				state = STATE.TOUCH_DOLLY;

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				var distance = Math.sqrt( dx * dx + dy * dy );
				dollyStart.set( 0, distance );
				break;

			case 3: // three-fingered touch: pan

				if ( scope.noPan === true ) return;

				state = STATE.TOUCH_PAN;

				panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				break;

			default:

				state = STATE.NONE;

		}

		if ( state !== STATE.NONE ) scope.dispatchEvent( startEvent );

	}

	function touchmove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();
		event.stopPropagation();

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		switch ( event.touches.length ) {

			case 1: // one-fingered touch: rotate

				if ( scope.noRotate === true ) return;
				if ( state !== STATE.TOUCH_ROTATE ) return;

				rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				// rotating across whole screen goes 360 degrees around
				scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );
				// rotating up and down along whole screen attempts to go 360, but limited to 180
				scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

				scope.update();
				break;

			case 2: // two-fingered touch: dolly

				if ( scope.noZoom === true ) return;
				if ( state !== STATE.TOUCH_DOLLY ) return;

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
				var distance = Math.sqrt( dx * dx + dy * dy );

				dollyEnd.set( 0, distance );
				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					scope.dollyOut();

				} else if ( dollyDelta.y < 0 ) {

					scope.dollyIn();

				}

				dollyStart.copy( dollyEnd );

				scope.update();
				break;

			case 3: // three-fingered touch: pan

				if ( scope.noPan === true ) return;
				if ( state !== STATE.TOUCH_PAN ) return;

				panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				panDelta.subVectors( panEnd, panStart );

				scope.pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();
				break;

			default:

				state = STATE.NONE;

		}

	}

	function touchend( /* event */ ) {

		if ( scope.enabled === false ) return;

		scope.dispatchEvent( endEvent );
		state = STATE.NONE;

	}
	
	/**
	 * Tilt function
	 * 
	 * For mobile, uses orientation sensors to orbit target object. Only supports
	 * orbit.  Pan and zoom may come later.  Ping me if of interest sean @ novak.us 
	 * 
	 * @param event 
	 * 
	 * @Performance: I have found that devicemotion event is a little faster 
	 * likely because the delta is part of the device event object and doesn't 
	 * have to be calculated here.  Though, I find that the deviceorientation 
	 * event is more common.
	 */
	function tilt(event){	
				
		switch(event.type) {
		
			case "deviceorientation" :

				rotateEnd.set( event.gamma, event.beta );
				rotateDelta.subVectors( rotateEnd, rotateStart );
				
				scope.rotateLeft( rotateDelta.x * scope.tiltSpeed);	
				scope.rotateUp( rotateDelta.y * scope.tiltSpeed);
				
				rotateStart.copy( rotateEnd );
				
				scope.update();

			break;
			case "devicemotion" :

		    	scope.rotateLeft(event.rotationRate.beta * scope.tiltSpeed) ;
		    	scope.rotateUp(event.rotationRate.alpha * scope.tiltSpeed) ;
		        
		    	scope.update();

			break;
		
		}

	} //tilt
	

	this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
	this.domElement.addEventListener( 'mousedown', onMouseDown, false );
	this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );
	this.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox

	this.domElement.addEventListener( 'touchstart', touchstart, false );
	this.domElement.addEventListener( 'touchend', touchend, false );
	this.domElement.addEventListener( 'touchmove', touchmove, false );

	window.addEventListener( 'keydown', onKeyDown, false );
		
	if (window.DeviceOrientationEvent ) {  
		
	    window.addEventListener("deviceorientation", tilt, false);
	    
	} else if ( window.DeviceMotionEvent ) {
		
	    window.addEventListener('devicemotion', tilt, false);
	    
	} 

	// force an update at start
	this.update();

};

THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;
